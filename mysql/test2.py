import os
import mysql.connector
from mysql.connector import Error
from datetime import datetime
from dotenv import load_dotenv
import typer

load_dotenv()

MYSQL_HOST = os.getenv("MYSQL_HOST")
MYSQL_USER = os.getenv("MYSQL_USER")
MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
MYSQL_DATABASE = os.getenv("MYSQL_DATABASE")

app = typer.Typer()

# --- Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ìï®Ïàò ---
def connect_to_db():
    try:
        connection = mysql.connector.connect(
        host=MYSQL_HOST,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DATABASE
        )
        print("‚úÖ Successfully connected to MySQL!")
        if connection.is_connected():
            return connection
    except Error as e:
        print(f"‚ùå Error connecting to MySQL: {e}")
        return None


def initialize_database():
    connection = connect_to_db()
    if connection:
        cursor = connection.cursor()
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞ ÏÑ§Ï†ï
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS employees (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                position VARCHAR(255) NOT NULL,
                salary FLOAT NOT NULL,
                hire_date DATE NOT NULL
            );
            """
        )
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS salary_backup (
                id INT AUTO_INCREMENT PRIMARY KEY,
                employee_id INT NOT NULL,
                name VARCHAR(255) NOT NULL,
                position VARCHAR(255) NOT NULL,
                salary FLOAT NOT NULL,
                backup_date DATETIME NOT NULL
            );
            """
        )
        # Ïä§ÌÜ†Ïñ¥Îìú ÌîÑÎ°úÏãúÏ†Ä ÏÉùÏÑ± (Î∞±ÏóÖ ÏàòÌñâ)
        cursor.execute(
            """
            CREATE OR REPLACE PROCEDURE BackupSalaries()
            BEGIN
                INSERT INTO salary_backup (employee_id, name, position, salary, backup_date)
                SELECT id, name, position, salary, NOW() FROM employees;
            END;
            """
        )
        # Ïù¥Î≤§Ìä∏ Ïä§ÏºÄÏ§ÑÎü¨ ÏÑ§Ï†ï (1Î∂ÑÎßàÎã§ Î∞±ÏóÖ)
        cursor.execute(
            """
            CREATE EVENT IF NOT EXISTS BackupEvent
            ON SCHEDULE EVERY 1 MINUTE
            DO CALL BackupSalaries();
            """
        )
        # Î∑∞ ÏÉùÏÑ± (ÏßÅÏõê Ï†ïÎ≥¥ ÏöîÏïΩ)
        cursor.execute(
            """
            CREATE OR REPLACE VIEW EmployeeSummary AS
            SELECT id, name, position, salary
            FROM employees;
            """
        )
        connection.commit()
        print("‚úÖ Database initialized successfully!")
        connection.close()


# --- Í∏∞Îä• Íµ¨ÌòÑ ---
@app.command()
def add_employee(name: str, position: str, salary: float):
    """ÏßÅÏõê Ï∂îÍ∞Ä"""
    connection = connect_to_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute(
            "INSERT INTO employees (name, position, salary, hire_date) VALUES (%s, %s, %s, %s)",
            (name, position, salary, datetime.now().date()),
        )
        connection.commit()
        print(f"‚úÖ Employee '{name}' added successfully!")
        connection.close()


@app.command()
def view_employees():
    """ÏßÅÏõê Î™©Î°ù Î≥¥Í∏∞"""
    connection = connect_to_db()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM EmployeeSummary")
        employees = cursor.fetchall()
        print("üìã Employee List:")
        for emp in employees:
            print(
                f"ID: {emp['id']}, Name: {emp['name']}, Position: {emp['position']}, Salary: {emp['salary']}"
            )
        connection.close()


@app.command()
def delete_employee(emp_id: int):
    """ÏßÅÏõê ÏÇ≠Ï†ú (Ìä∏Î¶¨Í±∞Î°ú Î≥µÍµ¨ ÌÖåÏä§Ìä∏)"""
    connection = connect_to_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute("DELETE FROM employees WHERE id = %s", (emp_id,))
        connection.commit()
        print(f"‚úÖ Employee with ID '{emp_id}' deleted successfully!")
        connection.close()


@app.command()
def view_backups():
    """Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞"""
    connection = connect_to_db()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM salary_backup")
        backups = cursor.fetchall()
        print("üìã Backup Data:")
        for backup in backups:
            print(
                f"Employee ID: {backup['employee_id']}, Name: {backup['name']}, "
                f"Position: {backup['position']}, Salary: {backup['salary']}, Backup Date: {backup['backup_date']}"
            )
        connection.close()

@app.command()
def init_db():
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Î™ÖÎ†π"""
    initialize_database()

# --- Î©îÏù∏ ---
if __name__ == "__main__":
    app()

